import { derived } from 'svelte/store';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var getTokens = function (key) {
    var keyWithoutBracket = key.replace(/\[(\d+)\]/g, '.$1');
    if (keyWithoutBracket.startsWith('.')) {
        keyWithoutBracket = keyWithoutBracket.slice(1);
    }
    return keyWithoutBracket.split('.');
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var getNested = function (root, keyTokens) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var current = root;
    for (var _i = 0, keyTokens_1 = keyTokens; _i < keyTokens_1.length; _i++) {
        var key = keyTokens_1[_i];
        if (current == null) {
            return undefined;
        }
        current = current[key];
    }
    return current;
};
var clonedWithPrototype = function (source) {
    var clone = Object.create(source);
    Object.assign(clone, source);
    return clone;
};
function keyed(parent, path) {
    var keyTokens = getTokens(path);
    if (keyTokens.some(function (token) { return token === '__proto__'; })) {
        throw new Error('key cannot include "__proto__"');
    }
    var branchTokens = keyTokens.slice(0, keyTokens.length - 1);
    var leafToken = keyTokens[keyTokens.length - 1];
    var keyedValue = derived(parent, function ($parent) {
        return getNested($parent, keyTokens);
    });
    var set = function (value) {
        parent.update(function ($parent) {
            if ($parent == null) {
                return $parent;
            }
            var newParent = Array.isArray($parent)
                ? __spreadArray([], $parent, true) : clonedWithPrototype($parent);
            getNested(newParent, branchTokens)[leafToken] = value;
            return newParent;
        });
    };
    var update = function (fn) {
        parent.update(function ($parent) {
            if ($parent == null) {
                return $parent;
            }
            var newValue = fn(getNested($parent, keyTokens));
            var newParent = Array.isArray($parent)
                ? __spreadArray([], $parent, true) : clonedWithPrototype($parent);
            getNested(newParent, branchTokens)[leafToken] = newValue;
            return newParent;
        });
    };
    return {
        subscribe: keyedValue.subscribe,
        set: set,
        update: update,
    };
}

export { getTokens, keyed };
