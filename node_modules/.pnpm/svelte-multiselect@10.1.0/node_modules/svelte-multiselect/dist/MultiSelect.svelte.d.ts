import { SvelteComponent } from "svelte";
import type { MultiSelectEvents, Option as T } from './types';
declare class __sveltets_Render<Option extends T> {
    props(): {
        activeIndex?: number | null | undefined;
        activeOption?: Option | null | undefined;
        createOptionMsg?: string | null | undefined;
        allowUserOptions?: boolean | "append" | undefined;
        allowEmpty?: boolean | undefined;
        autocomplete?: string | undefined;
        autoScroll?: boolean | undefined;
        breakpoint?: number | undefined;
        defaultDisabledTitle?: string | undefined;
        disabled?: boolean | undefined;
        disabledInputTitle?: string | undefined;
        duplicateOptionMsg?: string | undefined;
        duplicates?: boolean | undefined;
        key?: ((opt: T) => unknown) | undefined;
        filterFunc?: ((opt: Option, searchText: string) => boolean) | undefined;
        focusInputOnSelect?: boolean | "desktop" | undefined;
        form_input?: HTMLInputElement | null | undefined;
        highlightMatches?: boolean | undefined;
        id?: string | null | undefined;
        input?: HTMLInputElement | null | undefined;
        inputClass?: string | undefined;
        inputmode?: string | null | undefined;
        invalid?: boolean | undefined;
        liActiveOptionClass?: string | undefined;
        liOptionClass?: string | undefined;
        liSelectedClass?: string | undefined;
        loading?: boolean | undefined;
        matchingOptions?: Option[] | undefined;
        maxOptions?: number | undefined;
        maxSelect?: number | null | undefined;
        maxSelectMsg?: ((current: number, max: number) => string) | null | undefined;
        maxSelectMsgClass?: string | undefined;
        name?: string | null | undefined;
        noMatchingOptionsMsg?: string | undefined;
        open?: boolean | undefined;
        options: Option[];
        outerDiv?: HTMLDivElement | null | undefined;
        outerDivClass?: string | undefined;
        parseLabelsAsHtml?: boolean | undefined;
        pattern?: string | null | undefined;
        placeholder?: string | null | undefined;
        removeAllTitle?: string | undefined;
        removeBtnTitle?: string | undefined;
        minSelect?: number | null | undefined;
        required?: number | boolean | undefined;
        resetFilterOnAdd?: boolean | undefined;
        searchText?: string | undefined;
        selected?: Option[] | undefined;
        sortSelected?: boolean | ((op1: Option, op2: Option) => number) | undefined;
        selectedOptionsDraggable?: boolean | undefined;
        ulOptionsClass?: string | undefined;
        ulSelectedClass?: string | undefined;
        value?: Option | Option[] | null | undefined;
    };
    events(): MultiSelectEvents;
    slots(): {
        'expand-icon': {
            open: boolean;
        };
        selected: {
            option: Option;
            idx: any;
        };
        default: {
            option: Option;
            idx: any;
        };
        'remove-icon': {};
        'after-input': {
            selected: Option[];
            disabled: boolean;
            invalid: boolean;
            id: string | null;
            placeholder: string | null;
            open: boolean;
            required: number | boolean;
        };
        spinner: {};
        'disabled-icon': {};
        option: {
            option: Option;
            idx: any;
        };
        'user-msg': {
            searchText: string;
            msgType: any;
            msg: any;
        };
    };
}
export type MultiSelectProps<Option extends T> = ReturnType<__sveltets_Render<Option>['props']>;
export type MultiSelectEvents<Option extends T> = ReturnType<__sveltets_Render<Option>['events']>;
export type MultiSelectSlots<Option extends T> = ReturnType<__sveltets_Render<Option>['slots']>;
export default class MultiSelect<Option extends T> extends SvelteComponent<MultiSelectProps<Option>, MultiSelectEvents<Option>, MultiSelectSlots<Option>> {
}
export {};
