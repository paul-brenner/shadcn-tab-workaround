import { SvelteComponentTyped } from "svelte";
import type { Readable } from 'svelte/store';
declare class __sveltets_Render<Stores extends Record<string, unknown>> {
    props(): Stores & {};
    events(): {} & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: { [K in keyof Stores]: Stores[K] extends Readable<infer V> ? V : never; };
    };
}
export declare type SubscribeProps<Stores extends Record<string, unknown>> = ReturnType<__sveltets_Render<Stores>['props']>;
export declare type SubscribeEvents<Stores extends Record<string, unknown>> = ReturnType<__sveltets_Render<Stores>['events']>;
export declare type SubscribeSlots<Stores extends Record<string, unknown>> = ReturnType<__sveltets_Render<Stores>['slots']>;
export default class Subscribe<Stores extends Record<string, unknown>> extends SvelteComponentTyped<SubscribeProps<Stores>, SubscribeEvents<Stores>, SubscribeSlots<Stores>> {
}
export {};
