import satori, {} from 'satori';
import toReactElement from './toReactElement.js';
import { svg2png, initialize } from 'svg2png-wasm';
let initialized = false;
const fontFile = await fetch('https://sveltekit-og.ethercorps.io/noto-sans.ttf');
const fontData = await fontFile.arrayBuffer();
const indexWasmRes = await fetch('https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm');
const svg2PngWasmBuffer = await indexWasmRes.arrayBuffer();
const initSvgToPng = async () => {
    await initialize(svg2PngWasmBuffer).catch((e) => console.log(e));
    initialized = true;
};
const ImageResponse = async (htmlTemplate, optionsByUser) => {
    const options = Object.assign({ width: 1200, height: 630, debug: !1 }, optionsByUser);
    const svg = await satori(toReactElement(htmlTemplate), {
        width: options.width,
        height: options.height,
        debug: options.debug,
        fonts: options.fonts || [
            {
                name: 'sans serif',
                data: fontData,
                style: 'normal',
                weight: 700
            }
        ]
    });
    if (!initialized) {
        await initSvgToPng();
        initialized = true;
    }
    const defaultConfig = {
        width: options.width,
        height: options.height // optional
    };
    if (Object.hasOwn(options, 'backgroundColor')) {
        defaultConfig.backgroundColor = options.backgroundColor;
    }
    const png = await svg2png(svg, defaultConfig);
    return new Response(png, {
        headers: {
            'Content-Type': 'image/png',
            'cache-control': 'public, immutable, no-transform, max-age=31536000',
            ...options.headers
        },
        status: options.status,
        statusText: options.statusText
    });
};
const componentToImageResponse = (component, props = {}, optionsByUser) => {
    const htmlTemplate = componentToMarkup(component, props);
    return ImageResponse(htmlTemplate, optionsByUser);
};
const componentToMarkup = (component, props = {}) => {
    const SvelteRenderedMarkup = component.render(props);
    let htmlTemplate = `${SvelteRenderedMarkup.html}`;
    if (SvelteRenderedMarkup && SvelteRenderedMarkup.css && SvelteRenderedMarkup.css.code) {
        htmlTemplate = `${SvelteRenderedMarkup.html}<style>${SvelteRenderedMarkup.css.code}</style>`;
    }
    return htmlTemplate;
};
export { componentToImageResponse, ImageResponse, toReactElement };
