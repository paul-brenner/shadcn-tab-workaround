import type { BodyCell, BodyCellAttributes } from '../bodyCells';
import type { BodyRow, BodyRowAttributes } from '../bodyRows';
import type { DataColumn, FlatColumn } from '../columns';
import type { HeaderCell, HeaderCellAttributes } from '../headerCells';
import type { HeaderRow, HeaderRowAttributes } from '../headerRows';
import type { PluginInitTableState, TableAttributes, TableBodyAttributes, TableHeadAttributes } from '../createViewModel';
import type { Readable } from 'svelte/store';
export declare type TablePlugin<Item, PluginState, ColumnOptions, TablePropSet extends AnyTablePropSet = AnyTablePropSet, TableAttributeSet extends AnyTableAttributeSet = AnyTableAttributeSet> = (init: TablePluginInit<Item, ColumnOptions>) => TablePluginInstance<Item, PluginState, ColumnOptions, TablePropSet, TableAttributeSet>;
export declare type TablePluginInit<Item, ColumnOptions> = {
    pluginName: string;
    tableState: PluginInitTableState<Item>;
    columnOptions: Record<string, ColumnOptions>;
};
export declare type TablePluginInstance<Item, PluginState, ColumnOptions, TablePropSet extends AnyTablePropSet = AnyTablePropSet, TableAttributeSet extends AnyTableAttributeSet = AnyTableAttributeSet> = {
    pluginState: PluginState;
    transformFlatColumnsFn?: Readable<TransformFlatColumnsFn<Item>>;
    deriveFlatColumns?: DeriveFlatColumnsFn<Item>;
    deriveRows?: DeriveRowsFn<Item>;
    derivePageRows?: DeriveRowsFn<Item>;
    deriveTableAttrs?: DeriveFn<TableAttributes<Item>>;
    deriveTableHeadAttrs?: DeriveFn<TableHeadAttributes<Item>>;
    deriveTableBodyAttrs?: DeriveFn<TableBodyAttributes<Item>>;
    columnOptions?: ColumnOptions;
    hooks?: TableHooks<Item, TablePropSet, TableAttributeSet>;
};
export declare type AnyPlugins = Record<any, TablePlugin<any, any, any, any, any>>;
export declare type AnyPluginInstances = Record<any, TablePluginInstance<any, any, any, any, any>>;
export declare type TransformFlatColumnsFn<Item> = (flatColumns: DataColumn<Item>[]) => DataColumn<Item>[];
export declare type DeriveFlatColumnsFn<Item> = <Col extends FlatColumn<Item>>(flatColumns: Readable<Col[]>) => Readable<Col[]>;
export declare type DeriveRowsFn<Item> = <Row extends BodyRow<Item>>(rows: Readable<Row[]>) => Readable<Row[]>;
export declare type DeriveFn<T> = (obj: Readable<T>) => Readable<T>;
export declare type Components<Item, Plugins extends AnyPlugins = AnyPlugins> = {
    'thead.tr': HeaderRow<Item, Plugins>;
    'thead.tr.th': HeaderCell<Item, Plugins>;
    'tbody.tr': BodyRow<Item, Plugins>;
    'tbody.tr.td': BodyCell<Item, Plugins>;
};
export declare type AttributesForKey<Item, Plugins extends AnyPlugins = AnyPlugins> = {
    'thead.tr': HeaderRowAttributes<Item, Plugins>;
    'thead.tr.th': HeaderCellAttributes<Item, Plugins>;
    'tbody.tr': BodyRowAttributes<Item, Plugins>;
    'tbody.tr.td': BodyCellAttributes<Item, Plugins>;
};
export declare type ComponentKeys = keyof Components<unknown>;
declare type TablePropSet<PropSet extends {
    [K in ComponentKeys]?: unknown;
}> = {
    [K in ComponentKeys]: PropSet[K];
};
export declare type NewTablePropSet<PropSet extends {
    [K in ComponentKeys]?: unknown;
}> = {
    [K in ComponentKeys]: unknown extends PropSet[K] ? never : PropSet[K];
};
export declare type AnyTablePropSet = TablePropSet<any>;
declare type TableAttributeSet<AttributeSet extends {
    [K in ComponentKeys]?: unknown;
}> = {
    [K in ComponentKeys]: AttributeSet[K];
};
export declare type NewTableAttributeSet<AttributeSet extends {
    [K in ComponentKeys]?: unknown;
}> = {
    [K in ComponentKeys]: unknown extends AttributeSet[K] ? never : AttributeSet[K];
};
export declare type AnyTableAttributeSet = TableAttributeSet<any>;
export declare type TableHooks<Item, PropSet extends AnyTablePropSet = AnyTablePropSet, AttributeSet extends AnyTableAttributeSet = AnyTableAttributeSet> = {
    [ComponentKey in keyof Components<Item>]?: (component: Components<Item>[ComponentKey]) => ElementHook<PropSet[ComponentKey], AttributeSet[ComponentKey]>;
};
export declare type ElementHook<Props, Attributes> = {
    props?: Readable<Props>;
    attrs?: Readable<Attributes>;
};
export declare type PluginStates<Plugins extends AnyPlugins> = {
    [K in keyof Plugins]: ReturnType<Plugins[K]>['pluginState'];
};
declare type TablePropSetForPluginKey<Plugins extends AnyPlugins> = {
    [K in keyof Plugins]: Plugins[K] extends TablePlugin<any, any, any, infer TablePropSet> ? TablePropSet : never;
};
export declare type PluginTablePropSet<Plugins extends AnyPlugins> = {
    [ComponentKey in ComponentKeys]: {
        [PluginKey in keyof Plugins]: TablePropSetForPluginKey<Plugins>[PluginKey][ComponentKey];
    };
};
export declare type PluginColumnConfigs<Plugins extends AnyPlugins> = Partial<{
    [K in keyof Plugins]: ReturnType<Plugins[K]>['columnOptions'];
}>;
export {};
