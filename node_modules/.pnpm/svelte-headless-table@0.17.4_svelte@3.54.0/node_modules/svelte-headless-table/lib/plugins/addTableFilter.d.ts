import type { BodyRow } from '../bodyRows';
import type { TablePlugin, NewTablePropSet } from '../types/TablePlugin';
import { type Readable, type Writable } from 'svelte/store';
export interface TableFilterConfig {
    fn?: TableFilterFn;
    initialFilterValue?: string;
    includeHiddenColumns?: boolean;
    serverSide?: boolean;
}
export interface TableFilterState<Item> {
    filterValue: Writable<string>;
    preFilteredRows: Readable<BodyRow<Item>[]>;
}
export interface TableFilterColumnOptions<Item> {
    exclude?: boolean;
    getFilterValue?: (value: any) => string;
}
export declare type TableFilterFn = (props: TableFilterFnProps) => boolean;
export declare type TableFilterFnProps = {
    filterValue: string;
    value: string;
};
export declare type TableFilterPropSet = NewTablePropSet<{
    'tbody.tr.td': {
        matches: boolean;
    };
}>;
export declare const addTableFilter: <Item>({ fn, initialFilterValue, includeHiddenColumns, serverSide, }?: TableFilterConfig) => TablePlugin<Item, TableFilterState<Item>, TableFilterColumnOptions<Item>, TableFilterPropSet, import("../types/TablePlugin").AnyTableAttributeSet>;
export declare const textPrefixFilter: TableFilterFn;
